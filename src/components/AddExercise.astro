---
import { exercises, categories } from "./ExerciseLibrary.astro";

interface Option {
  value: number;
  label: string;
}

const levels = [...new Set(exercises.map(exercise => exercise.nivel))];
---

<style>
  select[multiple] { background-image: none; }
</style>

<form id="add-exercise-form" method="post" class="flex flex-col gap-y-4">
  <button
    id="add-exercise-button"
    class="px-4 py-2 bg-black border rounded-md text-electric-lime hover:text-lime-zest hover:border-lime-zest border-electric-lime"
  >
    Añadir ejercicio
  </button>
</form>

<dialog id="add-exercise-modal" class="text-white modal">
  <div class="modal-box rounded-xl scrollbar-hidden">
    <h3 class="mb-6 text-3xl text-center">Nuevo ejercicio</h3>
    <form id="exercise-form" class="flex flex-col gap-y-4">
      <fieldset class="flex flex-col p-4 border rounded-2xl border-electric-lime gap-y-3">
        <legend class="text-lg font-bold">Detalles</legend>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">Nombre del ejercicio</span>
          <input type="text" id="titulo" name="titulo" class="text-black rounded-full" required>
        </label>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">Descripción</span>
          <textarea id="descripcion" name="descripcion" class="text-black resize-none rounded-2xl"></textarea>
        </label>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">URL <span class="text-zinc-500">(TikTok/Instagram/YouTube)</span></span>
          <input type="url" id="video-url" name="video_url" class="text-black rounded-full" required>
        </label>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">Nivel</span>
          <select id="level" name="nivel" class="text-black rounded-full">
            {levels.map(level => (
              <option value={level}>
                {level === 'A' ? 'Avanzado' : level === 'B' ? 'Intermedio' : 'Básico'}
              </option>
            ))}
          </select>
        </label>
      </fieldset>

      <fieldset class="flex flex-col p-4 border rounded-2xl gap-y-3 border-electric-lime">
        <legend class="text-lg font-bold">Categorías</legend>
        {categories.filter(parentcategory => !parentcategory.categoria_padre)
          .map(category => (
            <label for={`select-categories-${category.id}`} class="relative flex flex-col">
              <span id={`span-category-${category.titulo}`} class="px-4 py-2 text-black bg-white rounded-full hover:cursor-pointer">{category.titulo}</span>
              <select form="add-exercise-form" id={`select-categories-${category.id}`} class="hidden mt-1 text-black rounded-2xl" name="categories" multiple>
                <option value="" disabled>Seleccionar subcategorías</option>
                {category.categorias_hijas?.map(subcategoryId => {
                  const subcategory = categories.find(cat => cat.id === subcategoryId);
                  return subcategory ? <option value={subcategory.id}>{subcategory.titulo}</option> : null;
                })}
              </select>
            </label>
          ))}
      </fieldset>

      <fieldset class="flex flex-col p-4 border rounded-2xl gap-y-3 border-electric-lime">
        <legend class="text-lg font-bold">Nuevas Categorías</legend>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">Título de la nueva categoría</span>
          <input type="text" id="new-category-title" class="text-black rounded-full">
        </label>
        <label class="flex flex-col gap-y-1">
          <span class="ml-2">Categoría padre</span>
          <select id="new-category-parent-id" class="text-black rounded-full">
            <option value="" disabled selected>Seleccionar categoría padre</option>
            {categories.filter(parentcategory => !parentcategory.categoria_padre).map(parent => (
              <option value={parent.id}>{parent.titulo}</option>
            ))}
          </select>
        </label>
        <button type="button" id="add-new-category" class="py-2 text-black transition-colors rounded-full bg-electric-lime hover:bg-lime-zest">
          Agregar Nueva Categoría
        </button>
        <div id="new-categories-list" class="mt-2"></div>
      </fieldset>

      <button type="submit" class="text-black rounded-full btn bg-electric-lime hover:bg-lime-zest">
        Subir ejercicio
      </button>
    </form>
    <div class="modal-action">
      <form method="dialog">
        <button class="text-black btn bg-electric-lime hover:bg-lime-zest">Cerrar</button>
      </form>
    </div>
  </div>
</dialog>

<script>
  const addExerciseButton = document.getElementById('add-exercise-button');
  const exerciseForm = document.getElementById('exercise-form');
  const addNewCategoryButton = document.getElementById('add-new-category');
  const newCategoriesList = document.getElementById('new-categories-list');

  let newCategories = [];

  addExerciseButton.addEventListener('click', event => {
    event.preventDefault();
    const addExerciseModal = document.getElementById('add-exercise-modal') as HTMLDialogElement;
    addExerciseModal.showModal();
  });

  addNewCategoryButton.addEventListener('click', () => {
    const newCategoryTitle = (document.getElementById('new-category-title') as HTMLInputElement).value;
    const newCategoryParentId = (document.getElementById('new-category-parent-id') as HTMLSelectElement).value;

    if (newCategoryTitle && newCategoryParentId) {
      const newCategory = {
        title: newCategoryTitle,
        parentId: newCategoryParentId,
      };

      newCategories.push(newCategory);
      updateNewCategoriesList();

      (document.getElementById('new-category-title') as HTMLInputElement).value = '';
      (document.getElementById('new-category-parent-id') as HTMLSelectElement).value = '';
    }
  });

  function updateNewCategoriesList() {
    newCategoriesList.innerHTML = '';
    newCategories.forEach((category, index) => {
      const categoryItem = document.createElement('div');
      categoryItem.className = 'flex justify-between items-center p-2 bg-zinc-800 rounded-md mt-2';
      categoryItem.innerHTML = `
        <span>${category.title}</span>
        <button type="button" class="ml-4 text-red-500 remove-category-btn" data-index="${index}">Eliminar</button>
      `;
      newCategoriesList.appendChild(categoryItem);
    });

    const removeButtons = document.querySelectorAll('.remove-category-btn');
    removeButtons.forEach(button => {
      button.addEventListener('click', (event) => {
        const index = (event.target as HTMLElement).getAttribute('data-index');
        newCategories.splice(Number(index), 1);
        updateNewCategoriesList();
      });
    });
  }

  exerciseForm.addEventListener('submit', async event => {
    event.preventDefault();

    const formData = new FormData(exerciseForm as HTMLFormElement);
    const data = {
      titulo: formData.get('titulo'),
      descripcion: formData.get('descripcion'),
      video_url: formData.get('video_url'),
      nivel: formData.get('nivel'),
      categorias: Array.from(document.querySelectorAll('[id^="select-categories-"]'))
        .flatMap(select => Array.from((select as HTMLSelectElement).selectedOptions))
        .map(option => option.value),
      nuevas_categorias: newCategories.map(cat => ({
        titulo: cat.title,
        categoria_padre_id: parseInt(cat.parentId),
      })),
    };

    const response = await fetch('https://api.javierolmotraining.es/ejercicio/', {
      method: 'POST',
      headers: {
        'accept': 'application/json',
        'Authorization': 'Token 971c6ade3b9dcf24d55c37d7de724cbae047458c',
        'Content-Type': 'application/json',
        'X-CSRFTOKEN': 'sTtGLyaCj1ihZ22CO7XWHR8k5La2hp2n9Tt2NOVTv8gk5WT6yFVIOwaY1tO9oHSN',
      },
      body: JSON.stringify(data),
    });

    if (response.ok) {
      console.log("Ejercicio añadido exitosamente");
    } else {
      console.error("Error al añadir el ejercicio");
    }
  });
</script>