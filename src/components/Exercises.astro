---
interface Exercise {
  id: number;
  titulo: string;
  video?: string;
  video_url?: string;
  fecha: string;
  creador: number;
  subida?: number;
  categorias: number[];
  usuarios_fav?: number[];
}

interface Category {
  id: number;
  titulo: string;
  aprobada?: boolean;
  categoria_padre?: number;
  categorias_hijas?: number[];
  subida_por?: number;
}

let exercises: Exercise[] = [];
let filteredExercises: Exercise[] = [];
let categories: Category[] = [];
let loading = true;
let error: string | null = null;
let token: string | undefined;

if (Astro.cookies.has("token")) {
  const tokenCookie = Astro.cookies.get("token");
  token = tokenCookie.value;
}

function extractYouTubeId(url: string): string | null {
  const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
  const match = url.match(regex);
  return match ? match[1] : null;
}

async function fetchData(): Promise<void> {
  try {
    if (!token) {
      throw new Error('Token is not available');
    }
    
    const [exercisesResponse, categoriesResponse] = await Promise.all([
      fetch('https://api.javierolmotraining.es/ejercicios/', {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': `Token ${token}`,
        },
      }),
      fetch('https://api.javierolmotraining.es/categorias/', {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          'Authorization': `Token ${token}`,
        },
      }),
    ]);

    if (!exercisesResponse.ok || !categoriesResponse.ok) {
      throw new Error('Failed to fetch data');
    }

    [exercises, categories] = await Promise.all([
      exercisesResponse.json(),
      categoriesResponse.json(),
    ]);
  } catch (err) {
    console.error('Fetch error:', err);
    error = err instanceof Error ? err.message : 'Failed to fetch data';
  } finally {
    loading = false;
  }
}

function filterExercises(searchValue?: string, selectedCategory?: number, selectedSubcategory?: number): void {
  let filtered = [...exercises];

  if (searchValue) {
    filtered = filtered.filter(item =>
      item.titulo.toLowerCase().includes(searchValue.toLowerCase())
    );
  }

  if (selectedCategory) {
    filtered = filtered.filter(item => item.categorias.includes(selectedCategory));
  }

  if (selectedSubcategory) {
    filtered = filtered.filter(item => item.categorias.includes(selectedSubcategory));
  }

  filteredExercises = filtered;
}

async function handleRequest(): Promise<void> {
  await fetchData();

  const { request } = Astro;
  const url = new URL(request.url);
  
  const searchValue = url.searchParams.get('search-exercise');
  const selectedCategory = url.searchParams.get('categories') ? Number(url.searchParams.get('categories')) : undefined;
  const selectedSubcategory = url.searchParams.get('subcategories') ? Number(url.searchParams.get('subcategories')) : undefined;

  filterExercises(searchValue, selectedCategory, selectedSubcategory);
}

await handleRequest();
---

<style>
  select { background-image: none; }
</style>

<form class="flex flex-col flex-wrap gap-8 mx-4 mb-8 text-black" method="get">
  <div>
    <label class="relative flex items-center max-w-md mx-auto">
      <input
        type="search"
        name="search-exercise"
        id="search-exercise"
        placeholder="Buscar ejercicio"
        class="w-full rounded-full bg-black border-[1.5px] grow text-white border-white focus:border-white placeholder:text-gray-300"
      />
      <button class="absolute text-white right-3" type="submit">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
        </svg>
      </button>
    </label>
  </div>

  <div class="flex flex-wrap gap-1">
    <button type="submit" class="px-4 py-2 bg-black border rounded-md text-electric-lime hover:text-lime-zest hover:border-lime-zest border-electric-lime">Filtrar</button>
    <button id="clear-filters" type="reset" class="px-4 py-2 bg-black border rounded-md text-electric-lime hover:text-lime-zest hover:border-lime-zest border-electric-lime">Quitar filtros</button>
    
    {categories.filter(parentcategory => !parentcategory.categoria_padre)
      .map(category => 
        <label for={`select-categories-${category.id}`} class="relative flex flex-col">
          <span id={`span-category-${category.titulo}`} class="px-4 py-2 rounded-md bg-electric-lime hover:bg-lime-zest hover:cursor-pointer">{category.titulo}</span>
          <select id={`select-categories-${category.id}`} multiple class="absolute z-10 hidden rounded-md top-11 categories bg-electric-lime hover:cursor-pointer hover:bg-lime-zest" name="categories">
            <option value="">{category.titulo}</option>
            {category.categorias_hijas?.map(subcategoryId => {
              const subcategory = categories.find(cat => cat.id === subcategoryId);
              return subcategory ? <option value={subcategory.id}>{subcategory.titulo}</option> : null;
            })}
          </select>
        </label>
      )
    }
  
    {categories.filter(subcategory => subcategory.categoria_padre && subcategory.categorias_hijas.length !== 0)
      .map(subcategory => 
        <label for={`select-subcategories-${subcategory.id}`} class="relative flex flex-col">
          <span id={`span-subcategory-${subcategory.titulo}`} class="px-4 py-2 rounded-md bg-electric-lime hover:bg-lime-zest hover:cursor-pointer">{subcategory.titulo}</span>
          <select id={`select-subcategories-${subcategory.id}`} multiple class="absolute z-10 hidden px-4 py-2 rounded-md top-11 subcategories bg-electric-lime hover:cursor-pointer hover:bg-lime-zest" name="subcategories">
            <option value="">{subcategory.titulo}</option>
            {subcategory.categorias_hijas?.map(subsubcategoryId => {
              const subsubcategory = categories.find(cat => cat.id === subsubcategoryId);
              return subsubcategory ? <option value={subsubcategory.id}>{subsubcategory.titulo}</option> : null;
            })}
          </select>
        </label>
      )
    }
  </div>
</form>

{loading ? (
  <div class="py-4 text-center">Loading...</div>
) : error ? (
  <div class="py-4 text-center text-red-600">{error}</div>
) : (
  <div class="grid gap-4 mx-4 text-black xs:grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
    {filteredExercises.map(exercise => (
      <div class="flex flex-col justify-between p-4 bg-white gap-y-2 rounded-3xl">
        <div>
          {exercise.video_url ? (
            <iframe
              class="w-full h-full rounded-lg"
              src={`https://www.youtube.com/embed/${extractYouTubeId(exercise.video_url)}`}
              loading="lazy"
              allowfullscreen
            >
            </iframe>
          ) : (
            <p>No hay video disponible</p>
          )}
        </div>
        <div class="flex items-center justify-center flex-grow text-center">
          <span>{exercise.titulo}</span>
        </div>
      </div>
    ))}
  </div>
)}

<script>
  document.getElementById('clear-filters')?.addEventListener('click', () => {
    const url = new URL(window.location.href);
    url.search = '';
    window.location.href = url.toString();
  });
  
  document.addEventListener('DOMContentLoaded', () => {
    const token = document.cookie.split('; ').find(row => row.startsWith('token='));
    const tokenValue = token ? token.split('=')[1] : null;
  
    if (!tokenValue) {
      window.location.href = '/signin';
    }

    const categories: NodeListOf<HTMLSpanElement> = document.querySelectorAll('[id^="span-category-"], [id^="span-subcategory-"]');

    categories.forEach((category: HTMLSpanElement) => {
      category.addEventListener('click', () => {
        categories.forEach((cat: HTMLSpanElement) => {
          const selectCategories = cat.nextElementSibling as HTMLSelectElement | null;
          if (selectCategories && selectCategories !== category.nextElementSibling) {
            selectCategories.classList.add('hidden');
          }
        });

        const selectCategories = category.nextElementSibling as HTMLSelectElement | null;
        selectCategories?.classList.toggle('hidden');

        if (selectCategories) {
          const rect = category.getBoundingClientRect();
          const dropdownRect = selectCategories.getBoundingClientRect();
          const verticalMargin = 108;

          if (rect.left + dropdownRect.width > window.innerWidth) {
            selectCategories.style.left = 'auto';
            selectCategories.style.right = '0';
          } else {
            selectCategories.style.left = '0';
            selectCategories.style.right = 'auto';
          }

          if (rect.top + dropdownRect.height > window.innerHeight) {
            selectCategories.style.top = 'auto';
            selectCategories.style.bottom = `${verticalMargin}%`;
          } else {
            selectCategories.style.top = `${verticalMargin}%`;
            selectCategories.style.bottom = 'auto';
          }
        }
      });
    });
  });
</script>