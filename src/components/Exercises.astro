---
interface Exercise {
  id: number;
  titulo: string;
  video?: string;
  video_url?: string;
  fecha: string;
  creador: number;
  subida?: number;
  categorias: number[];
  usuarios_fav?: number[];
}

interface Category {
  id: number;
  titulo: string;
  aprobada?: boolean;
  categoria_padre?: number;
  categorias_hijas?: number[];
  subida_por?: number;
}

const csrftoken = 'a1405a278e3f6671a2a07f4538e2a50921ddba59';

let exercises: Exercise[] = [];
let filteredExercises: Exercise[] = [];
let categories: Category[] = [];
let loading = true;
let error: string | null = null;

async function fetchExercises(): Promise<void> {
  try {
    const response = await fetch('https://api.javierolmotraining.es/ejercicios/', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': `Token ${csrftoken}`,
      },
    });

    if (!response.ok) {
      const errorMessage = `Failed to fetch exercise: ${response.statusText}`;
      throw new Error(errorMessage);
    }

    const result: Exercise[] = await response.json();
    exercises = result;
  } catch (err) {
    console.error('Fetch error:', err);
    error = err instanceof Error ? err.message : 'Failed to fetch data';
  } finally {
    loading = false;
  }
}

async function fetchCategories(): Promise<void> {
  try {
    const response = await fetch('https://api.javierolmotraining.es/categorias/', {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Authorization': `Token ${csrftoken}`,
      },
    });

    if (!response.ok) {
      const errorMessage = `Failed to fetch data: ${response.statusText}`;
      throw new Error(errorMessage);
    }

    const result: Category[] = await response.json();
    categories = result;
  } catch (err) {
    console.error('Fetch error:', err);
    error = err instanceof Error ? err.message : 'Failed to fetch data';
  }
}

function filterExercises(searchValue?: string, selectedCategory?: number, selectedSubcategory?: number): void {
  filteredExercises = exercises;
  console.log('Ejercicios antes del filtrado:', filteredExercises);

  if (searchValue) {
    filteredExercises = filteredExercises.filter(item =>
      item.titulo.toLowerCase().includes(searchValue.toLowerCase())
    );
    console.log('Ejercicios tras búsqueda:', filteredExercises);
  }

  if (selectedCategory) {
    filteredExercises = filteredExercises.filter(item =>
      item.categorias.includes(selectedCategory)
    );
    console.log('Ejercicios tras categoría:', filteredExercises);
  }

  if (selectedSubcategory) {
    filteredExercises = filteredExercises.filter(item =>
      item.categorias.includes(selectedSubcategory)
    );
    console.log('Ejercicios tras subcategoría:', filteredExercises);
  }
}

async function handleRequest(): Promise<void> {
  await fetchExercises();
  await fetchCategories();

  const { request } = Astro;
  const url = new URL(request.url);
  const searchValue = url.searchParams.get('search-exercise');
  const selectedCategory = url.searchParams.get('categories') ? Number(url.searchParams.get('categories')) : undefined;
  const selectedSubcategory = url.searchParams.get('subcategories') ? Number(url.searchParams.get('subcategories')) : undefined;

  filterExercises(searchValue, selectedCategory, selectedSubcategory);
}

await handleRequest();
---

<form class="flex flex-col flex-wrap gap-8 mx-4 mb-8 text-black" method="get">
  <div>
    <label class="relative flex items-center max-w-md mx-auto">
      <input
        type="search"
        name="search-exercise"
        id="search-exercise"
        placeholder="Buscar ejercicio"
        class="w-full rounded-full bg-black border-[1.5px] grow text-white border-white focus:border-white placeholder:text-gray-300"
      />
      <button class="absolute text-white right-3" type="submit">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
        </svg>
      </button>
    </label>
  </div>

  <div class="flex flex-wrap gap-1">
    <button type="submit" class="px-4 py-2 bg-black border rounded-md text-electric-lime hover:text-lime-zest hover:border-lime-zest border-electric-lime">Filtrar</button>
    
    {categories.filter(parentcategory => !parentcategory.categoria_padre)
      .map(category => 
        <select id={`categories-${category.id}`} class="px-4 py-2 rounded-md categories bg-electric-lime hover:cursor-pointer hover:bg-lime-zest" name="categories">
          <option value={category.id}>{category.titulo}</option>
          {category.categorias_hijas?.map(subcategoryId => {
            const subcategory = categories.find(cat => cat.id === subcategoryId);
            return subcategory ? <option value={subcategory.id}>{subcategory.titulo}</option> : null;
          })}
        </select>
      )
    }
  
    {categories.filter(subcategory => subcategory.categoria_padre && subcategory.categorias_hijas.length !== 0)
      .map(subcategory => 
        <select id={`subcategories-${subcategory.id}`} class="px-4 py-2 rounded-md subcategories bg-electric-lime hover:cursor-pointer hover:bg-lime-zest" name="subcategories">
          <option value={subcategory.id}>{subcategory.titulo}</option>
          {subcategory.categorias_hijas?.map(subsubcategoryId => {
            const subsubcategory = categories.find(cat => cat.id === subsubcategoryId);
            return subsubcategory ? <option value={subsubcategory.id}>{subsubcategory.titulo}</option> : null;
          })}
        </select>
      )
    }  
  </div>
</form>

{loading ? (
  <div class="py-4 text-center">Loading...</div>
) : error ? (
  <div class="py-4 text-center text-red-600">{error}</div>
) : (
  <div class="grid gap-4 mx-4 text-black xs:grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5">
    {filteredExercises.map(exercise => (
      <div class="flex flex-col justify-between p-4 bg-white rounded-3xl aspect-[2/3]">
        <div>
          
        </div>
        <div>
          <h4 class="text-center">{exercise.titulo}</h4>
        </div>
      </div>
    ))}
  </div>
)}